#!/bin/bash

FIELD=ImageHash.${1-"perceptiveHash"}
HASH=${2-"001eeff6"}
MINSCORE=${3-4}

# ImageHash.perceptiveHash
# ImageHash.valueHash
# ImageHash.waveletHash
# ImageHash.simplePerceptiveHash
# ImageHash.phash
# ImageHash.hhash
# ImageHash.whash
# ImageHash.phashSimple
# ImageHash.hsvHash
# ImageHash.whashSimple


# SERVER=https://dev.zorroa.com:8066
# USER=admin
# PASSWORD=z0rr0@12

SERVER=https://petrol.zorroa.com:8066
USER=admin
PASSWORD=z0rr0@12

# SERVER=http://flickr.zorroa:8066
# USER=admin
# PASSWORD=admin

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
projroot=$DIR/..
json=$projroot/node_modules/.bin/json

# this should be running from the project root
if [[ ! -f $json ]]; then
  echo 'Cant find "json" executable; please run this from the project root'
  echo 'and make sure you have run npm install recently'
  exit
fi

tmpdir=$(mktemp -d)
cd $tmpdir

echo searching field $FIELD hash $HASH

filter=$(cat << END
{
  "size": 36,
  "filter": {
    "hamming": {
      "field": "${FIELD}.raw",
      "hashes": [ "${HASH}" ],
      "minScore": ${MINSCORE}
    }
  }
}
END
)

command=$(cat << END
curl -H "Content-Type: application/json" -X POST ${SERVER}/api/v3/assets/_search -u ${USER}:${PASSWORD} -d '$filter' > hashSearchResults
END
)

echo command=$command
eval $command

# show the file path containing the search results
echo ${tmpdir}/hashSearchResults

# show the matched hashes from search results
echo "Search result matching hashes ($FIELD)"
json -f hashSearchResults list | json -a document.ImageHash.${FIELD} | column

# echo hash search results:
# cat hashSearchResults

# On the flickr server, snag the original flickr URL
# $json -f hashSearchResults list | json -a document.flickr.URL > images

# create a montage image of the proxies from the search results
$json -f ${tmpdir}/hashSearchResults list |
$json -aj document.proxies.proxies |
json -e '
  d=this["document.proxies.proxies"];
  w=Math.min.apply(null, d.map(e=>e.width));
  this.proxy=d.reduce((a,v)=>a.width < v.width ? a : v, d[0]);' |
json -a proxy.id \
> images

echo "images $tmpdir/images"

# cat url.list | parallel -j 8 wget -O {#}.html {}
< images parallel -k -j 8 wget --no-check-certificate --quiet --user ${USER} --password ${PASSWORD} "${SERVER}/api/v1/ofs/{}"

montage -geometry 128x128+0+0 *.jpg montage.jpg

open -a preview montage.jpg

echo results in $tmpdir
